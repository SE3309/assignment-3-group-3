-- Use the selected database
USE restaurant_schema;

-- View 1 for question 7: Create a view to summarize customer reservations
CREATE VIEW CustomerReservations AS
SELECT 
    Customer.name AS CustomerName,  -- Retrieve the customer's name
    Reservation.headCount,         -- Retrieve the headcount for the reservation
    Reservation.date AS ReservationDate  -- Retrieve the date of the reservation
FROM Customer
JOIN Reservation ON Customer.customerID = Reservation.customerID;
-- This view provides a consolidated summary of customer reservations, combining the Customer and Reservation tables.

-- View 2 for question 7: Create a view to summarize order details
CREATE VIEW OrderDetailsSummary AS
SELECT 
    Menu.name AS MenuItem,               -- Retrieve the name of the menu item
    SUM(OrderDetail.quantity) AS TotalQuantity  -- Calculate the total quantity ordered for each menu item
FROM OrderDetail
JOIN Menu ON OrderDetail.menuID = Menu.menuID
GROUP BY Menu.name;
-- This view provides a summary of order details, showing the total quantity ordered for each menu item.


-- View 3 for quesiton 7: (BONUS)
-- Create a view to summarize revenue generated by staff and their performance
CREATE VIEW StaffRevenueSummary AS
SELECT 
    Staff.name AS StaffName,                     -- Name of the staff member
    Staff.jobTitle,                              -- Job title of the staff member (e.g., Chef, Server)
    SUM(OrderDetail.quantity * Menu.price) AS TotalRevenue, -- Total revenue generated by this staff member
    COUNT(DISTINCT CustomerOrder.customerOrderID) AS TotalOrdersHandled -- Total number of unique orders handled
FROM Staff
JOIN CustomerOrder ON Staff.staffID = CustomerOrder.staffID -- Join Staff with CustomerOrder based on staffID
JOIN OrderDetail ON CustomerOrder.customerOrderID = OrderDetail.customerOrderID -- Join CustomerOrder with OrderDetail based on customerOrderID
JOIN Menu ON OrderDetail.menuID = Menu.menuID -- Join OrderDetail with Menu to get item prices
GROUP BY Staff.staffID                         -- Group by staffID to aggregate revenue and orders per staff
ORDER BY TotalRevenue DESC;                    -- Sort by total revenue in descending order


-- View  4 for question 7 (BONUS)
-- View to identify all customers with activity (reservations or orders)
CREATE VIEW FrequentCustomers AS
SELECT 
    Customer.name AS CustomerName,               -- Name of the customer
    COUNT(DISTINCT Reservation.reservationID) AS TotalReservations, -- Total number of unique reservations made by the customer
    COUNT(DISTINCT CustomerOrder.customerOrderID) AS TotalOrders, -- Total number of unique orders placed by the customer
    SUM(OrderDetail.quantity * Menu.price) AS TotalSpent -- Total spending by the customer, calculated as quantity times price
FROM Customer
-- Join the Customer table with the Reservation table to include reservation details
LEFT JOIN Reservation ON Customer.customerID = Reservation.customerID 
-- Join the Customer table with the CustomerOrder table to include order details
LEFT JOIN CustomerOrder ON Customer.customerID = CustomerOrder.customerID 
-- Join the CustomerOrder table with the OrderDetail table to get item quantities in each order
LEFT JOIN OrderDetail ON CustomerOrder.customerOrderID = OrderDetail.customerOrderID
-- Join the OrderDetail table with the Menu table to get prices of ordered items
LEFT JOIN Menu ON OrderDetail.menuID = Menu.menuID
-- Group the data by customerID to aggregate their reservations, orders, and spending
GROUP BY Customer.customerID
-- Order the results by total spending in descending order (most valuable customers first)
ORDER BY TotalSpent DESC;



-- Query the CustomerReservations view to retrieve the first 5 rows
SELECT * FROM CustomerReservations LIMIT 5;
-- This query retrieves a sample of the data from the CustomerReservations view, limiting it to 5 rows for demonstration purposes.

-- Query the OrderDetailsSummary view to retrieve the first 5 rows
SELECT * FROM OrderDetailsSummary LIMIT 5;
-- This query retrieves a sample of the data from the OrderDetailsSummary view, limiting it to 5 rows for demonstration purposes.

-- Query the StaffRevenueSummary view
SELECT * FROM StaffRevenueSummary LIMIT 5;


-- Retrieve the first 5 customers based on spending
SELECT * FROM FrequentCustomers LIMIT 5;



-- Attempt to insert a record into the CustomerReservations view
-- INSERT INTO CustomerReservations (CustomerName, HeadCount, ReservationDate)
-- VALUES ('New Customer', 3, '2024-01-20');
-- This operation will fail because `CustomerReservations` is a view, and views are not inherently updatable.
-- Any attempt to insert, update, or delete data directly in the view will result in an error unless the view is explicitly designed to allow such operations (e.g., using `WITH CHECK OPTION`).

-- Attempt to insert a record into the OrderDetailsSummary view
-- INSERT INTO OrderDetailsSummary (MenuItem, TotalQuantity)
-- VALUES ('New Dish', 15);
-- This operation will fail because `OrderDetailsSummary` is a view.
-- Views are derived from underlying tables and are not meant for direct data manipulation unless they are specifically designed for it.


-- INSERT INTO FrequentCustomers (CustomerName, TotalReservations, TotalOrders, TotalSpent) 
-- VALUES ('John Doe', 2, 3, 50.00); 
-- This Operation wil fail because 'FrequentCustomers is a view.


-- INSERT INTO StaffRevenueSummary (StaffName, jobTitle, TotalRevenue, TotalOrdersHandled)
-- VALUES ('John Doe', 'Server', 500.00, 10);
-- This operation will fail because 'StaffRevenueSummary' is a view.


