-- Use the selected database
USE restaurant_schema;

-- QUESTION 5 query 1: List customers and their reservation dates (limited to 5 rows)
SELECT Customer.name AS CustomerName, Reservation.date AS ReservationDate
FROM Customer
JOIN Reservation ON Customer.customerID = Reservation.customerID
LIMIT 5;
-- This query retrieves the name of the customer and their reservation date by joining the Customer and Reservation tables.
-- It limits the result to the first 5 rows for demonstration.

-- QUESTION 5 query 2: List menu items that have been ordered at least once
SELECT name AS MenuItem, price
FROM Menu
WHERE menuID IN (
    SELECT DISTINCT menuID
    FROM OrderDetail
);
-- This query fetches menu items that have been ordered at least once by checking if their `menuID` exists in the OrderDetail table.

-- QUESTION 5 query 3: Calculate total revenue generated by each menu item
SELECT Menu.name AS MenuItem, SUM(OrderDetail.quantity * Menu.price) AS TotalRevenue
FROM OrderDetail
JOIN Menu ON OrderDetail.menuID = Menu.menuID
GROUP BY Menu.name
ORDER BY TotalRevenue DESC;
-- This query joins the OrderDetail and Menu tables to calculate the total revenue (quantity * price) for each menu item.
-- The results are grouped by menu item name and ordered by revenue in descending order.

-- QUESTION 5 query 4: List staff members who have handled at least one customer order
SELECT Staff.name AS StaffName, Staff.jobTitle
FROM Staff
WHERE EXISTS (
    SELECT 1
    FROM CustomerOrder
    WHERE CustomerOrder.staffID = Staff.staffID
);
-- This query checks if a staff member exists in the CustomerOrder table, meaning they have handled an order.
-- It lists the name and job title of such staff members.

-- QUESTION 5 query 5: Find pairs of customers who visited for the first time on the same date
SELECT C1.name AS Customer1, C2.name AS Customer2, C1.firstDateOfVisit
FROM Customer C1
JOIN Customer C2 ON C1.firstDateOfVisit = C2.firstDateOfVisit AND C1.customerID < C2.customerID
LIMIT 5;
-- This query uses a self-join on the Customer table to find pairs of customers who share the same first date of visit.
-- It ensures each pair is unique by comparing `customerID` and limits the output to 5 rows.

-- QUESTION 5 query 6: List menu items ordered more than 10 times, sorted by quantity
SELECT Menu.name AS MenuItem, SUM(OrderDetail.quantity) AS TotalQuantity
FROM OrderDetail
JOIN Menu ON OrderDetail.menuID = Menu.menuID
GROUP BY Menu.name
HAVING TotalQuantity > 10
ORDER BY TotalQuantity DESC;
-- This query calculates the total quantity of each menu item ordered.
-- It filters out items with quantities <= 10 and sorts the results in descending order of quantity.

-- QUESTION 5 query 7: Calculate total spending by each customer, grouped by staff member
SELECT 
    Customer.name AS CustomerName,
    Staff.name AS StaffName,
    SUM(OrderDetail.quantity * Menu.price) AS TotalSpent
FROM CustomerOrder
JOIN Customer ON CustomerOrder.customerID = Customer.customerID
JOIN Staff ON CustomerOrder.staffID = Staff.staffID
JOIN OrderDetail ON CustomerOrder.customerOrderID = OrderDetail.customerOrderID
JOIN Menu ON OrderDetail.menuID = Menu.menuID
GROUP BY Customer.name, Staff.name
ORDER BY TotalSpent DESC;
-- This query joins multiple tables to calculate the total amount spent by each customer, grouped by the staff member handling their orders.
-- Results are sorted by the total spent in descending order.
